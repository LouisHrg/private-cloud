version: "3.7"

services:

  certbot:
    image: certbot/certbot
    container_name: certbot
    command: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/letsencrypt
    networks:
      - front_network

  reverse-proxy:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-reverse-proxy
    image: reverse-proxy:custom
    container_name: proxy
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - passbolt
      - standardnotes
      - cozy
      - davis
      - syncthing
      - xbs
      - wekan
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/letsencrypt
      - davis_www:/var/www/davis
    networks:
      - front_network
      - passwords_network
      - notes_network
      - cloud_network
      - calendar_network
      - bookmarks_network
      - sync_network
      - tasks_network
    ports:
      - 80:80
      - 443:443

  mysql:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mysql
    image: mariadb:custom
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - NOTES_DATABASE=${NOTES_DATABASE}
      - NOTES_DB_USERNAME=${NOTES_DB_USERNAME}
      - NOTES_DB_PASSWORD=${NOTES_DB_PASSWORD}
      - PASSBOLT_DATABASE=${PASSBOLT_DATABASE}
      - PASSBOLT_DB_USERNAME=${PASSBOLT_DB_USERNAME}
      - PASSBOLT_DB_PASSWORD=${PASSBOLT_DB_PASSWORD}
      - DAVIS_DATABASE=${DAVIS_DATABASE}
      - DAVIS_DB_USERNAME=${DAVIS_DB_USERNAME}
      - DAVIS_DB_PASSWORD=${DAVIS_DB_PASSWORD}
    restart: unless-stopped
    volumes:
      - database_mysql_volume:/var/lib/mysql
    networks:
      - passwords_network
      - notes_network
      - calendar_network

  passbolt:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-passbolt
    image: passbolt:custom
    container_name: passbolt
    environment:
      - APP_FULL_BASE_URL=https://${PASSWORDS_DOMAIN}
      - DATASOURCES_DEFAULT_HOST=mysql
      - DATASOURCES_DEFAULT_DATABASE=${PASSBOLT_DATABASE}
      - DATASOURCES_DEFAULT_USERNAME=${PASSBOLT_DB_USERNAME}
      - DATASOURCES_DEFAULT_PASSWORD=${PASSBOLT_DB_PASSWORD}
      - EMAIL_DEFAULT_FROM=${EMAIL}
      - EMAIL_TRANSPORT_DEFAULT_HOST=${MAIL_HOST}
      - EMAIL_TRANSPORT_DEFAULT_PORT=${MAIL_PORT}
      - EMAIL_TRANSPORT_DEFAULT_TLS=true
      - EMAIL_TRANSPORT_DEFAULT_USERNAME=${MAIL_USERNAME}
      - EMAIL_TRANSPORT_DEFAULT_PASSWORD=${MAIL_PASSWORD}
    restart: unless-stopped
    command: ["/usr/bin/wait-for.sh", "mysql:3306", "--", "/docker-entrypoint.sh"]
    tty: true
    depends_on:
      - mysql
    volumes:
      - gpg_volume:/var/www/passbolt/config/gpg
    tmpfs:
      - /run
    networks:
      - passwords_network

  standardnotes:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-standardnotes
    image: standardnotes:custom
    container_name: notes
    environment:
      - RAILS_ENV=production
      - RAILS_SERVE_STATIC_FILES=true
      - SECRET_KEY_BASE=${NOTES_SECRET_KEY_BASE}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=${NOTES_DATABASE}
      - DB_USERNAME=${NOTES_DB_USERNAME}
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
    restart: unless-stopped
    command: >
        sh -c 'while ! nc -vz mysql 3306 ; do sleep 10 ; done &&
               /data/src/docker/entrypoint bootstrap &&
               /data/src/docker/entrypoint start'
    depends_on:
      - mysql
    networks:
      - notes_network

  # Cozy Database
  couchdb:
    image: couchdb:2.3
    container_name: couchdb
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    restart: unless-stopped
    volumes:
      - database_couch_volume:/opt/couchdb/data
    networks:
      - cloud_network

  # Cozy Stack
  cozy:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-cozy
      args:
        version: "1.4.1"
    image: cozy:custom
    container_name: cozy
    environment:
      - DOMAIN=${CLOUD_DOMAIN}
      - COUCHDB_PROTOCOL=http
      - COUCHDB_HOST=couchdb
      - COUCHDB_PORT=5984
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
      - COZY_ADMIN_PASSPHRASE=${COZY_ADMIN_PASSPHRASE}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DISABLE_TLS=false
      - MAIL_SKIP_CERTIFICATE_VALIDATION=false
    restart: unless-stopped
    depends_on:
      - couchdb
    volumes:
      - files_cozy_volume:/var/lib/cozy/data
    networks:
      - cloud_network

  # Caldav / Carddav server
  davis:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-davis
      args:
        version: "1.4.5"
    image: davis:custom
    container_name: davis
    environment:
      - APP_ENV=prod
      - APP_SECRET=${DAVIS_APP_SECRET}
      - DATABASE_URL=mysql://${DAVIS_DB_USERNAME}:${DAVIS_DB_PASSWORD}@mysql:3306/${DAVIS_DATABASE}
      - MAILER_URL=smtp://${MAIL_HOST}:${MAIL_PORT}?username=${MAIL_USERNAME}&password=${MAIL_PASSWORD}
      - ADMIN_LOGIN=${DAVIS_ADMIN_LOGIN}
      - ADMIN_PASSWORD=${DAVIS_ADMIN_PASSWORD}
      - AUTH_REALM=${DAVIS_AUTH_REALM}
      - AUTH_METHOD=Digest
      - CALDAV_ENABLED=true
      - CARDDAV_ENABLED=true
      - WEBDAV_ENABLED=false
      - INVITE_FROM_ADDRESS=${EMAIL}
    restart: unless-stopped
    depends_on:
      - mysql
    volumes:
      - davis_www:/var/www/davis
    networks:
      - calendar_network

  # XBS = X-browser sync
  xbs:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-xbs
    image: xbs:custom
    container_name: xbs
    environment:
      - XBS_API_HOSTNAME=${BOOKMARKS_DOMAIN}
      - XBROWSERSYNC_DB_USER=${XBS_DB_USERNAME}
      - XBROWSERSYNC_DB_PWD=${XBS_DB_PASSWORD}
    restart: unless-stopped
    depends_on:
      - mongo
    networks:
      - bookmarks_network

  # XBS + Wekan database
  mongo:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mongo
    image: mongo:custom
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - WEKAN_DATABASE=${WEKAN_DATABASE}
      - WEKAN_DB_USERNAME=${WEKAN_DB_USERNAME}
      - WEKAN_DB_PASSWORD=${WEKAN_DB_PASSWORD}
      - XBS_DATABASE=${XBS_DATABASE}
      - XBS_DB_USERNAME=${XBS_DB_USERNAME}
      - XBS_DB_PASSWORD=${XBS_DB_PASSWORD}
    restart: unless-stopped
    volumes:
      - database_mongo_volume:/data/db
    networks:
      - bookmarks_network
      - tasks_network

  # Syncthing
  syncthing:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-syncthing
    image: syncthing:custom
    container_name: syncthing
    environment:
      - PUID=${SYNC_PUID}
      - PGID=${SYNC_PGID}
      - SYNC_UI_PASSWORD=${SYNC_UI_PASSWORD}
      - SYNC_API_KEY=${SYNC_API_KEY}
    restart: unless-stopped
    volumes:
      - files_sync_volume:/var/syncthing/data
    networks:
      - sync_network
    ports:
      - 22000:22000 # We must expose this port for Syncthing to work

  # Wekan (tasks)
  wekan:
    image: wekanteam/wekan
    container_name: tasks
    environment:
      - MONGO_URL=mongodb://${WEKAN_DB_USERNAME}:${WEKAN_DB_PASSWORD}@mongo:27017/${WEKAN_DATABASE}?authSource=admin
      - ROOT_URL=https://${TASKS_DOMAIN}
      - MAIL_URL=smtps://${MAIL_USERNAME}:${MAIL_PASSWORD}@${MAIL_HOST}:${MAIL_PORT}
      - MAIL_FROM=${WEKAN_MAIL_FROM}
    restart: unless-stopped
    depends_on:
      - mongo
    networks:
      - tasks_network

  # Mails (bound on a specific IP for th reverse to be unique)
  dovecot:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-dovecot
      args:
        top_domain: ${TOP_DOMAIN}
        mail_domain: ${MAIL_DOMAIN}
    image: dovecot:custom
    container_name: dovecot
    env_file: .env
    restart: unless-stopped
    volumes:
      - mails_volume:/var/mail
      - letsencrypt_certs:/etc/letsencrypt
    networks:
      - mail_network
    ports:
      - "${MAIL_HOST_IP}:143:143"
      - "${MAIL_HOST_IP}:993:993"

  smtpd:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-opensmtpd
      args:
        top_domain: ${TOP_DOMAIN}
        mail_domain: ${MAIL_DOMAIN}
    image: opensmtpd:custom
    container_name: smtpd
    env_file: .env
    restart: unless-stopped
    volumes:
      - mails_volume:/var/mail
      - letsencrypt_certs:/etc/letsencrypt
    networks:
      - mail_network
    ports:
      - "${MAIL_HOST_IP}:25:25"
      - "${MAIL_HOST_IP}:465:465"
      - "${MAIL_HOST_IP}:587:587"

networks:
  front_network: ~
  passwords_network: ~
  notes_network: ~
  cloud_network: ~
  calendar_network: ~
  bookmarks_network: ~
  sync_network: ~
  tasks_network: ~
  mail_network: ~

volumes:
  letsencrypt_certs:
    name: letsencrypt_certs
  letsencrypt_www:
    name: letsencrypt_www
  gpg_volume:
    name: gpg_volume
  davis_www:
    name: davis_www
  database_mysql_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/mysql
  database_couch_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/couch
  database_mongo_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/mongo
  files_cozy_volume: # This volume is actually an attached OpenStack Block storage. It stores the cozy files
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/cozy
  files_sync_volume: # This volume is actually an attached OpenStack Block storage. It stores the syncthing data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/sync
  mails_volume: # This volume is actually an attached OpenStack Block storage. It stores the syncthing data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/mails
version: "3.7"

services:

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/letsencrypt
    env_file: .env
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - front_network

  reverse-proxy:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-reverse-proxy
    image: reverse-proxy:custom
    container_name: proxy
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/letsencrypt
      - baikal_www:/var/www/calendar_server
    ports:
        - 80:80
        - 443:443
    depends_on:
      - passbolt
      - standardnotes
      - cozy
      - baikal
      - syncthing
      - xbs
      - wekan
    restart: unless-stopped
    env_file: .env
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - front_network
      - sesame_network
      - notes_network
      - cloud_network
      - calendar_network
      - bookmarks_network
      - sync_network
      - tasks_network

  mysql:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mysql
    image: mariadb:custom
    container_name: mysql
    restart: unless-stopped
    env_file: .env
    volumes:
      - database_mysql_volume:/var/lib/mysql
    networks:
      - sesame_network
      - notes_network
      - calendar_network

  passbolt:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-passbolt
    image: passbolt:custom
    container_name: passbolt
    tty: true
    depends_on:
      - mysql
    volumes:
      - gpg_volume:/var/www/passbolt/config/gpg
    tmpfs:
      - /run
    command: ["/usr/bin/wait-for.sh", "mysql:3306", "--", "/docker-entrypoint.sh"]
    restart: unless-stopped
    env_file: .env
    networks:
      - sesame_network

  standardnotes:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-standardnotes
    image: standardnotes:custom
    container_name: notes
    depends_on:
      - mysql
    command: >
      bash -c 'while ! nc -vz mysql 3306 ; do sleep 10 ; done &&
               sleep 2 &&
               /data/src/docker/entrypoint bootstrap &&
               /data/src/docker/entrypoint start'
    restart: unless-stopped
    env_file: .env
    networks:
      - notes_network

  # Cozy Database
  couchdb:
    image: couchdb:2.3
    container_name: couchdb
    restart: unless-stopped
    env_file: .env
    volumes:
      - database_couch_volume:/opt/couchdb/data
    networks:
      - cloud_network

  # Cozy Stack
  cozy:
    image: cozy/cozy-stack
    container_name: cozy
    restart: unless-stopped
    env_file: .env
    depends_on:
      - couchdb
    volumes:
      - files_cozy_volume:/var/lib/cozy/data
    networks:
      - cloud_network

  # Caldav server
  baikal:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-baikal
      args:
        email: ${EMAIL}
        mail_host: ${MAIL_HOST}
        calendar_domain: ${CALENDAR_DOMAIN}
        mail_username: ${MAIL_USERNAME}
        mail_password: ${MAIL_PASSWORD}
    image: baikal:custom
    container_name: baikal
    restart: unless-stopped
    env_file: .env
    depends_on:
      - mysql
    volumes:
      - baikal_www:/var/www/calendar_server
    networks:
      - calendar_network

  # XBS = X-browser sync
  xbs:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-xbs
    image: xbs:custom
    container_name: xbs
    depends_on:
      - mongo
    restart: unless-stopped
    env_file: .env
    networks:
      - bookmarks_network

  # XBS Database / Wekan database
  mongo:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-mongo
    image: mongo:custom
    container_name: mongo
    restart: unless-stopped
    env_file: .env
    volumes:
      - database_mongo_volume:/data/db
    networks:
      - bookmarks_network
      - tasks_network

  # Syncthing
  syncthing:
    build:
      context: ./
      dockerfile: ./build/Dockerfile-syncthing
    image: syncthing:custom
    container_name: syncthing
    restart: unless-stopped
    env_file: .env
    ports:
      - 22000:22000 # We must expose this port for Syncthing to work
    volumes:
      - files_sync_volume:/var/syncthing/data
    networks:
      - sync_network

  # Wekan (tasks)
  wekan:
    image: wekanteam/wekan
    container_name: tasks
    restart: unless-stopped
    env_file: .env
    depends_on:
      - mongo
    networks:
      - tasks_network

networks:
  front_network: ~
  sesame_network: ~
  notes_network: ~
  cloud_network: ~
  calendar_network: ~
  bookmarks_network: ~
  sync_network: ~
  tasks_network: ~

volumes:
  letsencrypt_certs: ~
  letsencrypt_www: ~
  gpg_volume: ~
  baikal_www: ~
  database_mysql_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/mysql
  database_couch_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/couch
  database_mongo_volume: # This volume is actually an attached OpenStack Block storage
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/databases/mongo
  files_cozy_volume: # This volume is actually an attached OpenStack Block storage. It stores the cozy files
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/cozy
  files_sync_volume: # This volume is actually an attached OpenStack Block storage. It stores the syncthing data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/files/sync
